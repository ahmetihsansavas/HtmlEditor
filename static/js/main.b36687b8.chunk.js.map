{"version":3,"sources":["logo.svg","toolbarComp/CustomOption.js","toolbarComp/KareEkleme.js","toolbarComp/MentionEkleme.js","toolbarComp/RenkDegistirme.js","MyEditor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomOption","addStar","props","editorState","onChange","contentState","Modifier","replaceText","getCurrentContent","getSelection","getCurrentInlineStyle","EditorState","push","className","onClick","this","Component","KareEkleme","kareekle","MentionEkleme","mentionekle","RenkDegistirme","state","displayColorPicker","color","r","g","b","a","handleClick","setState","handleClose","handleChange","rgb","document","getElementsByClassName","styles","reactCSS","width","height","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","id","style","blockDndPlugin","createBlockDndPlugin","droppableBlockDndPlugin","handleDrop","selection","dataTransfer","isInternal","getEditorState","setEditorState","raw","data","getData","split","IMAGE_BLOCK_TYPE_SEPARATOR","length","IMAGE_BLOCK_TYPE_PURE","url","imagePlugin","addImage","forceSelection","uploadImageCallBack","file","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","FormData","append","send","addEventListener","response","JSON","parse","responseText","error","MyEditor","createEmpty","onEditorStateChange","onClear","ContentState","createFromText","alert","window","location","reload","element","createElement","Blob","draftToMarkdown","convertToRaw","type","href","URL","createObjectURL","download","body","appendChild","click","ReactDOM","findDOMNode","console","log","placeholder","plugins","mention","separator","trigger","suggestions","text","value","toolbar","image","uploadCallback","alt","present","mandatory","link","linkCallback","params","embedded","embedCallback","detectedSrc","exec","embed","hashtag","toolbarCustomButtons","refreshPage","readOnly","stringify","draftToHtml","React","App","useState","files","setFiles","useDropzone","accept","onDrop","acceptedFiles","map","Object","assign","preview","getRootProps","getInputProps","images","key","name","src","Boolean","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b36687b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EditorState, Modifier } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport '../styles.css'\n\nclass CustomOption extends Component {\n  static propTypes = {\n    onChange: PropTypes.func,\n    editorState: PropTypes.object,\n  };\n\n  addStar = ()=> {\n    const { editorState, onChange } = this.props;\n    const contentState = Modifier.replaceText(\n      editorState.getCurrentContent(),\n      editorState.getSelection(),\n      '⭐',\n      editorState.getCurrentInlineStyle(),\n    );\n    onChange(EditorState.push(editorState, contentState, 'insert-characters'));\n  };\n\n  render() {\n    return (\n      <div className=\"AddStar\" onClick={this.addStar}>⭐</div>\n    );\n  }\n}\n\nexport default CustomOption;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EditorState, Modifier } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport '../styles.css';\n\n class KareEkleme extends Component {\n    static propTypes = {\n        onChange: PropTypes.func,\n        editorState: PropTypes.object,\n      };\n    kareekle = () =>{\n        const { editorState, onChange } = this.props;\n        const contentState = Modifier.replaceText(\n          editorState.getCurrentContent(),\n          editorState.getSelection(),\n          '#',\n          editorState.getCurrentInlineStyle(),\n        );\n        onChange(EditorState.push(editorState, contentState, 'insert-characters'));\n    }\n\n    render() {\n        return (\n            <div className=\"kareekle\" onClick={this.kareekle}>#</div>\n        )\n    }\n}\nexport default KareEkleme;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EditorState, Modifier } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport '../styles.css';\n\n class MentionEkleme extends Component {\n    static propTypes = {\n        onChange: PropTypes.func,\n        editorState: PropTypes.object,\n      };\n    mentionekle = () =>{\n        const { editorState, onChange } = this.props;\n        const contentState = Modifier.replaceText(\n          editorState.getCurrentContent(),\n          editorState.getSelection(),\n          '@',\n          editorState.getCurrentInlineStyle(),\n        );\n        onChange(EditorState.push(editorState, contentState, 'insert-characters'));\n    }\n\n    render() {\n        return (\n            <div className=\"MentionEkle\" onClick={this.mentionekle}>@</div>\n        )\n    }\n}\nexport default MentionEkleme;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { EditorState, Modifier } from 'draft-js';\nimport reactCSS from 'reactcss'\nimport { Editor } from 'react-draft-wysiwyg';\nimport '../styles.css';\nimport { SketchPicker } from 'react-color';\n\n class RenkDegistirme extends Component {\n    state = {\n        displayColorPicker: false,\n        color: {\n          r: '241',\n          g: '112',\n          b: '19',\n          a: '1',\n        },\n      };\n    \n      handleClick = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n      };\n    \n      handleClose = () => {\n        this.setState({ displayColorPicker: false })\n      };\n    \n      handleChange = (color) => {\n        this.setState({ color: color.rgb })\n      };\n    \n\n    render() {\n        var item = document.getElementsByClassName(\"rdw-editor-toolbar\")[0] ;\n        //console.log(ReactDOM.findDOMNode(\"rdw-editor-toolbar\").style)\n        const styles = reactCSS({\n            'default': {\n              color: {\n                width: '36px',\n                height: '14px',\n                borderRadius: '2px',\n                background: `rgba(${ this.state.color.r }, ${ this.state.color.g }, \n                  ${ this.state.color.b }, ${ this.state.color.a })`,\n              },\n              swatch: {\n                padding: '5px',\n                background: '#fff',\n                borderRadius: '1px',\n                boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                display: 'inline-block',\n                cursor: 'pointer',\n              },\n              popover: {\n                position: 'absolute',\n                zIndex: '2',\n              },\n              cover: {\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                left: '0px',\n              },\n            },\n          });\n        return (\n            <div id=\"renkdegistirme\">\n            <div id =\"renkdegistirme\" style={ styles.swatch } onClick={ this.handleClick }>\n              <div style={ styles.color } />\n            </div>\n            { this.state.displayColorPicker ? <div style={ styles.popover }>\n              <div  style={ styles.cover } onClick={ this.handleClose }/>\n              <SketchPicker  id=\"renkdegistirme\" style = {{background :this.state.color }} \n              color={ this.state.color } onChange={ this.handleChange } />\n            </div> : null }\n    \n          </div>\n        )\n    }\n}\nexport default RenkDegistirme;","import React , {useRef}from 'react';\nimport ReactDOM from 'react-dom';\nimport {EditorState,convertToRaw,ContentState} from 'draft-js';\n//import 'draft-js/dist/Draft.css';\nimport './styles.css'\nimport {Editor} from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport CanvasDraw from \"react-canvas-draw\";\nimport CustomOption from \"./toolbarComp/CustomOption\";\nimport KareEkleme from './toolbarComp/KareEkleme';\nimport MentionEkleme from \"./toolbarComp/MentionEkleme\";\nimport createBlockDndPlugin , {imagePlugin,IMAGE_BLOCK_TYPE_SEPARATOR,IMAGE_BLOCK_TYPE_PURE} from 'draft-js-drag-n-drop-plugin';\nimport draftToHtml from \"draftjs-to-html\";\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport embed from 'embed-video';\nimport RenkDegistirme from './toolbarComp/RenkDegistirme';\n\nconst blockDndPlugin = createBlockDndPlugin();\nconst droppableBlockDndPlugin = {\n  ...blockDndPlugin,\n  handleDrop: (\n    selection,\n    dataTransfer,\n    isInternal,\n    {getEditorState, setEditorState}\n  ) => {\n    const editorState = getEditorState();\n    const raw = dataTransfer.data.getData('text');\n    const data = raw ? raw.split(IMAGE_BLOCK_TYPE_SEPARATOR) : [];\n    if (data.length > 1 && data[0] === IMAGE_BLOCK_TYPE_PURE) {\n      const url = data[1];\n      if (url) {\n        const newState = imagePlugin.addImage(EditorState.forceSelection(editorState, selection), url);\n        setEditorState(newState);\n      }\n    }\n\n    return blockDndPlugin.handleDrop(selection, dataTransfer, isInternal, {\n      getEditorState,\n      setEditorState\n    });\n  }\n};\n\nfunction uploadImageCallBack(file) {\n  return new Promise(\n    (resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', 'https://api.imgur.com/3/image');\n      xhr.setRequestHeader('Authorization', 'Client-ID 8d26ccd12712fca');\n      const data = new FormData();\n      data.append('image', file);\n      xhr.send(data);\n      xhr.addEventListener('load', () => {\n        const response = JSON.parse(xhr.responseText);\n        resolve(response);\n      });\n      xhr.addEventListener('error', () => {\n        const error = JSON.parse(xhr.responseText);\n        reject(error);\n      });\n    }\n  );\n}\n\n\nclass MyEditor extends React.Component {\n  constructor(props){\n    super(props);\n\n  }\n  state = {\n    editorState: EditorState.createEmpty(),\n  }\n  \n  onEditorStateChange = (editorState) => {\n    this.setState({\n      editorState,\n    });\n  };\n   onClear = ()=> {\n  const editorState = EditorState.push(this.state.editorState, ContentState.createFromText(''));\n  this.setState({ editorState });\n  }\n   refreshPage(){ \n    alert(\"Editörü sıfırlamak istediğinize emin misiniz?\");\n    window.location.reload(); \n}\n  saveFile(){\n    //draftToMarkdown(convertToRaw(editorState.getCurrentContent()));\n    const { editorState } = this.state;\n    const element = document.createElement(\"a\");\n    const file = new Blob([draftToMarkdown(convertToRaw(editorState.getCurrentContent()))], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.txt\";\n    document.body.appendChild(element); \n    element.click();\n  }\n colorchange(){\n   let color = ReactDOM.findDOMNode().getElementsByClassName(\"rdw-editor-wrapper\")\n   console.log(color)\n }\n\n  render() {\n  \n    const { editorState } = this.state;\n      //console.log(\"Editor state\",this.state.editorState);\n      //console.log(()=>draftToHtml(convertToRaw(editorState.getCurrentContent())) );\n    \n    return (\n      <div>  \n      <Editor placeholder=\"Başlamak için...\"\n              editorState={editorState}\n              onEditorStateChange={this.onEditorStateChange}\n              plugins = {[droppableBlockDndPlugin]}\n              mention={{\n                separator: ' ',\n                trigger: '@',\n                suggestions: [\n                  { text: 'FSMVU', value: 'fsmvu', url: 'fsmvu' },\n                  { text: 'BLM', value: 'blm', url: 'blm' },\n                  { text: 'BME', value: 'bme', url: 'bme' },\n                  { text: 'Java', value: 'java', url: 'java' },\n                  { text: 'React', value: 'react', url: 'react' },\n                  { text: 'ReactEditor', value: 'reacteditor', url: 'reacteditor' },\n                  { text: 'JavaScript', value: 'js', url: 'js' },\n                  \n                ],\n              }}\n              toolbar = {{image: { uploadCallback: uploadImageCallBack, \n                alt: { present: true, mandatory: false } },\n                link: {\n                  linkCallback: params => ({ ...params })\n                },\n                embedded: {\n                  embedCallback: link => {\n                    const detectedSrc = /<iframe.*? src=\"(.*?)\"/.exec(embed(link));\n                    return (detectedSrc && detectedSrc[1]) || link;\n                  }\n                },\n                \n              }}\n              hashtag={{\n                separator: ' ',\n                trigger: '#',\n              }}\n              toolbarCustomButtons = {[<CustomOption/>,<KareEkleme/>,<MentionEkleme/>,<RenkDegistirme/>]}\n              \n      />\n              \n      <button id=\"clear\" type=\"button\" style={{top: \"560px\",\n        position: \"absolute\",\n        left: \"890px\"}} onClick={this.refreshPage }> <span>Temizle</span> </button>\n        <button id=\"save\" type=\"button\" style={{top: \"560px\",\n        position: \"absolute\",\n        left: \"950px\"}} onClick={()=>{const element = document.createElement(\"a\");\n        const file = new Blob([draftToMarkdown(convertToRaw(editorState.getCurrentContent()))], {type: 'text/plain'});\n        element.href = URL.createObjectURL(file);\n        element.download = \"myFile.txt\";\n        document.body.appendChild(element); \n        element.click(); }}> <span>Kaydet</span> </button>\n      <h2>JSON Formatı</h2>\n      <textarea\n      readOnly\n      className=\"rdw-storybook-textarea\"\n      value={JSON.stringify(editorState, null, 4)}\n      //value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n    />\n    <h2>Html Formatı</h2>\n    <textarea\n    readOnly\n    className=\"rdw-storybook-textarea\"\n    //value={JSON.stringify(editorState, null, 4)}\n    value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n  />\n  <h2>Markdown</h2>\n  <textarea\n  readOnly\n  className=\"rdw-storybook-textarea\"\n  value={draftToMarkdown(convertToRaw(editorState.getCurrentContent()))}\n/>\n              {console.log(\"consol\",document.getElementsByClassName(\"rdw-editor-toolbar\"))}\n             \n    </div>\n   \n    );\n  }\n}\n\nexport default MyEditor;","import React , {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyEditor from './MyEditor'\nimport {useDropzone} from 'react-dropzone'\nvar red = '#F4614C';\nfunction App() {\n  const [files,setFiles] = useState([]);\n  const {getRootProps,getInputProps} = useDropzone({\n    accept:\"image/*\",\n    onDrop: (acceptedFiles) =>{\n          setFiles(\n            acceptedFiles.map((file)=> Object.assign(file,{\n              preview : URL.createObjectURL(file)\n            }))\n          )\n    }\n  })\nconst images = files.map((file)=>(\n  <div key={file.name}>\n  <div>\n    <img src={file.preview} style={{width:\"300px\"}} alt=\"preview\" />\n  </div> \n  </div>\n))\n  return (\n    \n    <div className=\"App\">\n    <h1>React Editor</h1>\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      <p>Buraya dosyaları sürükleyin...</p>\n      <div>{images}</div>\n     \n    </div>\n    \n     <MyEditor />\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}